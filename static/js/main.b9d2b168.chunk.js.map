{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","url","className","style","recipe","href","src","alt","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","key","label","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2MCmB3CC,EAjBA,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,YAAaC,EAAS,EAATA,IAClD,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BACI,uBAAGC,KAAMJ,GAAT,IAAgBJ,EAAhB,MAEJ,yBAAKK,UAAWC,IAAMJ,MAAMO,IAAKP,EAAOQ,IAAKV,IAC7C,4BACKG,EAAYQ,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAGxB,wCAAcZ,KCgDXa,G,MA3DH,WACV,IADgB,EAIcC,mBAAS,IAJvB,mBAITC,EAJS,KAIAC,EAJA,OAKYF,mBAAS,IALrB,mBAKTG,EALS,KAKDC,EALC,OAMUJ,mBAAS,IANnB,mBAMTK,EANS,KAMFC,EANE,KAQhBC,qBAAW,WACTC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAHC,2CAAH,qDAehB,OACE,yBAAKxB,UAAY,OACf,8BACE,2BAAOA,UAAU,cAAjB,6BAEF,0BAAMyB,SAVQ,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAOoBd,UAAU,eACpC,2BAAOA,UAAU,aAAa4B,KAAK,OAAOC,MAAOhB,EAAQiB,SAf1C,SAAAJ,GACnBZ,EAAUY,EAAEK,OAAOF,UAef,4BAAQ7B,UAAU,gBAAgB4B,KAAK,UAAvC,WAIF,wBAAI5B,UAAU,gBAAd,yBACA,uBAAGA,UAAU,QAAb,0EACA,yBAAKA,UAAU,WACZW,EAAQL,KAAI,SAAAJ,GAAM,OACjB,kBAAC,EAAD,CACA8B,IAAK9B,EAAOA,OAAO+B,MACnBtC,MAASO,EAAOA,OAAO+B,MACvBrC,SAAYsC,KAAKC,MAAMjC,EAAOA,OAAON,UACrCC,MAASK,EAAOA,OAAOL,MACvBC,YAAeI,EAAOA,OAAOJ,YAC7BC,IAAKG,EAAOA,OAAOH,UAIvB,uBAAGC,UAAU,SAAb,oCACA,uBAAGA,UAAU,SAAb,yBC7CcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9d2b168.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1okz9\",\"image\":\"recipe_image__MqXxG\"};","import React from \"react\";\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = ({title, calories, image, ingredients, url}) => {\r\n    return (\r\n        <div className={style.recipe}>\r\n            <h1>\r\n                <a href={url}> {title} </a>\r\n            </h1>\r\n            <img className={style.image}src={image} alt={title}/>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p>Calories: {calories}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React, {useState, useEffect} from 'react';\r\nimport Recipe from \"./Recipe\";\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const APP_ID = \"94dd0300\";\r\n  const APP_KEY = \"a107ebb0bbcb93d7634e51c4b84cecd9\";\r\n\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [query, setQuery] = useState('');\r\n\r\n  useEffect( () => {\r\n    getRecipes();\r\n  }, [query])\r\n\r\n  const getRecipes = async () => {\r\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\r\n    const data = await response.json();\r\n    setRecipes(data.hits); //Store the objects in the var recipes\r\n  }\r\n\r\n  const updateSearch = e => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  const getSearch = e => {\r\n    e.preventDefault();\r\n    setQuery(search);\r\n    setSearch('');\r\n  }\r\n  return (\r\n    <div className = \"App\">\r\n      <head>\r\n        <title className=\"page-title\">Search recipes and more!</title>\r\n      </head>\r\n      <form onSubmit= {getSearch} className=\"search-form\">\r\n        <input className=\"search-bar\" type=\"text\" value={search} onChange={updateSearch}/>\r\n        <button className=\"search-button\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      <h1 className=\"catch-phrase\">What are you craving?</h1>\r\n      <p className=\"info\">You can make up to five searches per minute on any dish or ingredient.</p>\r\n      <div className=\"recipes\">\r\n        {recipes.map(recipe => (\r\n          <Recipe \r\n          key={recipe.recipe.label} \r\n          title = {recipe.recipe.label} \r\n          calories = {Math.round(recipe.recipe.calories)}\r\n          image = {recipe.recipe.image}\r\n          ingredients = {recipe.recipe.ingredients}\r\n          url={recipe.recipe.url}\r\n          />\r\n        ) )}\r\n      </div>\r\n      <p className=\"creds\">Search bar powered by Edamam API</p>\r\n      <p className=\"creds\">Kamal Ali Â©2020</p>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}